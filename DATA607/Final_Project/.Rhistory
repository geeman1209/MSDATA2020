library(xlsx)
install.packages('xlsx')
library(xlsx)
library(tidyr)
library(xlsx)
install.packages(c("RWeka", "textmineR", "tidyquant", "twitteR", "xlsx"))
install.packages(c("RWeka", "textmineR", "tidyquant", "twitteR", "xlsx"))
library(twitteR)
library(tidyr)
library(xlsx)
install.packages('xlsx')
library(xlsx)
library('java')
install.packages('Java')
knitr::opts_chunk$set(echo = TRUE)
library(twitteR)
library(twitteR)
install.packages('twitteR')
install.packages('quantmod')
install.packages('rvest')
install.packages('stringr')
install.packages('purrr')
setwd("~/MSinDS/DATA607-DataAcquisition/FinalProject607/MSDATA2020/DATA607/Final_Project")
install.packages('dplyr')
install.packages('tidyr')
install.packages('ggplot2')
install.packages('lubridate')
install.packages('RCurl')
install.packages('tm')
install.packages('textmineR')
install.packages("textmineR")
install.packages('RWeka')
install.packages("wordcloud")
install.packages("RColorBrewer")
install.packages('tibble')
library(twitteR)
install.packages("twitteR")
library(twitteR)
install.packages('twitteR')
install.packages('rjson')
install.packages('rjson',dependencies = TRUE)
library(twitteR)
library(RCurl)
install.packages('liboauth')
library(twitteR)
install.packages('twitteR')
install.packages("rlang") :
install.packages("rlang")
library(twitteR)
Install.packages(Rcmdr)
install.packages('rmdformats')
install.packages('LaTex')
Sys.getenv("RSTUDIO_PANDOC")
#library(twitteR)
library(quantmod)
install.packages('quantmod')
#library(twitteR)
library(quantmod)
install.packages('quantmod',dependecies = TRUE)
library(quantmod)
library(quantmod)
install.packages('zoo')
midCapFunds
knitr::opts_chunk$set(echo = TRUE)
mdFrame <- dateFrame
colnames(smFrame) <- c("Date","Day")
mdFrame <- dateFrame
colnames(mdFrame) <- c("Date","Day")
mdFrame$DFDMX_Close <- DFDMX$DFDMX.Close
DFDMX
View(mdFrame)
mdFrame <- dateFrame
colnames(mdFrame) <- c("Date","Day")
mdFrame$DFDMX_Close <- DFDMX$DFDMX.Close
start<- as.Date("2020-03-15")
end <- as.Date("2020-04-30")
#Retrieving information on Top 5 Small Growth Funds as ranked by "U.S. News"
smallCapFunds <- c("PSGAX", "FKASX", "PGSGX", "QUASX", "TRSSX")
getSymbols(smallCapFunds, src = "yahoo", from = start, to = end)
library(twitteR)
library(quantmod)
library(rvest)
library(stringr)
library(purrr)
library(tidytext)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(RCurl)
library(egg)
start<- as.Date("2020-03-15")
end <- as.Date("2020-04-30")
#Retrieving information on Top 5 Small Growth Funds as ranked by "U.S. News"
smallCapFunds <- c("PSGAX", "FKASX", "PGSGX", "QUASX", "TRSSX")
getSymbols(smallCapFunds, src = "yahoo", from = start, to = end)
#Retreiving information on Top 5 Mid Growth Funds as ranked by "U.S. News"
midCapFunds <- c("DFDMX", "CCSMX","PRDMX", "OTCAX", "BMGAX")
getSymbols(midCapFunds, src = "yahoo", from = start, to = end)
#Retrieving information on Top 5 Large Growth Funds as ranked by "U.s News"
largeCapFunds <- c("TRLGX", "PREFX", "TPLGX", "FDSVX", "PBLAX")
getSymbols(largeCapFunds, src = "yahoo", from = start, to = end)
#Retrieve Dow Jones Industrial Average
getSymbols("DJIA", src = "yahoo", from = start, to = end)
# glimpse data
dplyr::glimpse(PSGAX)
DFDMX$DFDMX.Open
DFDMX$DFDMX.Close
mdFrame <- dateFrame
colnames(mdFrame) <- c("Date","Day")
mdFrame$DFDMX_Close <- DFDMX$DFDMX.Close
mdFrame$CCSMX_Close <- CCSMX$CCSMX.Close
mdFrame$PRDMX_Close <- PRDMX$PRDMX.Close
mdFrame$OTCAX_Close <- OTCAX$OTCAX.Close
mdFrame$BMGAX_Close <- BMGAX$BMGAX.Close
mdFrame$Sentiment <- wh.bing$sentiment
# bar plot for positive and negative sentiments
wh.bing %>%
ungroup() %>%
select(-day) %>%
select(negative, positive) %>%
summarise_all(funs(sum)) %>%
gather(variable, value, negative:positive) %>%
ggplot(aes(variable, value,  fill = variable)) +
geom_bar(stat="identity") +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25)
#create empty dataframe
testFrame <- data.frame(date = character(),
stringsAsFactors = FALSE)
for (i in 1:length(wh_dates)){
testFrame <- rbind(testFrame,cbind(as.data.frame(unlist(wh_dates[[i]]),stringsAsFactors = FALSE),i))
}
dateFrame <- na.omit(testFrame)
data0 <- data.frame(text=character(),
Day=integer(),
stringsAsFactors=FALSE)
for (i in 1:length(wh_briefings)){
data0 <- rbind(data0,cbind(as.data.frame(unlist(wh_briefings[[i]]),stringsAsFactors = FALSE),i))
}
colnames(data0) <- c('text','day')
correctMatch <- inner_join(dateFrame,data0,by= c("i" = "day"))
colnames(correctMatch) <- c('date', 'day', 'text')
wh_data <- correctMatch
tidy_data <- wh_data %>%
mutate(linenumber = row_number()) %>%
ungroup() %>%
unnest_tokens(word, text)
head(tidy_data)
# modeldate - convert into date
trump_apprdf$modeldate <- mdy(trump_apprdf$modeldate)
#github URL
theURL <- getURL("https://raw.githubusercontent.com/geeman1209/MSDATA2020/master/DATA607/Final_Project/approval_topline.csv")
# Read csv from github
trump_apprdf <- read.csv(text = theURL,stringsAsFactors = FALSE)
# glimpse data
dplyr::glimpse(trump_apprdf)
tidy_data <- wh_data %>%
mutate(linenumber = row_number()) %>%
ungroup() %>%
unnest_tokens(word, text)
head(tidy_data)
# modeldate - convert into date
trump_apprdf$modeldate <- mdy(trump_apprdf$modeldate)
dplyr::glimpse(trump_apprdf)
# filter data for April, 2020
trump_apprsubdf <- trump_apprdf %>%
filter(modeldate >= as.Date("2020-04-01"))
custom_stop_words <- bind_rows(tibble(word = c("EDT"),
lexicon = c("custom")),
stop_words)
custom_stop_words
afinn <- get_sentiments("afinn")
tidy_data %>%
anti_join(stop_words) %>%
group_by(day) %>%
inner_join(afinn) %>%
count(word, sort = TRUE) %>%
arrange(day,-n)
# Using lexicon affin
affinLex <- get_sentiments("afinn")
wh.affin <- tidy_data %>%
anti_join(stop_words) %>%
group_by(day) %>%
inner_join(affinLex) %>%
summarise(sentiment = sum(value)) %>%
mutate(method="affin")
wh.affin
# bar plot for positive and negative cumulative score
wh.affin %>%
summarise(Positive = sum(sentiment[sentiment>0]), Negative = sum(sentiment[sentiment<0])) %>%
gather(variable, value, Positive:Negative) %>%
ggplot(aes(variable, value,  fill = variable)) +
geom_bar(stat="identity") +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25)
# Using lexicon bing
bingLex <- get_sentiments("bing")
wh.bing <- tidy_data %>%
anti_join(stop_words) %>%
group_by(day) %>%
inner_join(bingLex) %>%
count(day, sentiment) %>%
spread(sentiment, n, fill=0) %>%
mutate(sentiment = positive - negative) %>%
mutate(method="bing")
wh.bing
# bar plot for positive and negative sentiments
wh.bing %>%
ungroup() %>%
select(-day) %>%
select(negative, positive) %>%
summarise_all(funs(sum)) %>%
gather(variable, value, negative:positive) %>%
ggplot(aes(variable, value,  fill = variable)) +
geom_bar(stat="identity") +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25)
# Using lexicon nrc
nrcLex <- get_sentiments("nrc")
wh.nrc <- tidy_data %>%
anti_join(stop_words) %>%
group_by(day) %>%
inner_join(nrcLex) %>%
filter(sentiment %in% c("positive", "negative")) %>%
count(day, sentiment) %>%
spread(sentiment, n, fill=0) %>%
mutate(sentiment = positive - negative) %>%
mutate(method="nrc")
wh.nrc
# bar graph for all categories in nrc lexicon
tidy_data %>%
anti_join(stop_words) %>%
group_by(day) %>%
inner_join(nrcLex) %>%
#filter(sentiment %in% c("positive", "negative")) %>%
count(day, sentiment) %>%
spread(sentiment, n, fill=0) %>%
ungroup() %>%
select(-day) %>%
summarise_all(funs(sum)) %>%
gather(variable, value, anger:trust) %>%
ggplot(aes(variable, value,  fill = variable)) +
geom_bar(stat="identity") +
geom_text(aes(label=value), position=position_dodge(width=0.9), vjust=-0.25)
# Comparing all 3 lexicons
wh.aff_bin_nrc <- bind_rows(wh.affin, wh.bing, wh.nrc)
bind_rows(wh.aff_bin_nrc) %>%
ggplot(aes(day, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
# comparing the cumulative sentiments for all 3 lexicons
wh.aff_bin_nrc %>%
group_by(method) %>%
summarise(sentiment = sum(sentiment)) %>%
ggplot(aes(method, sentiment, fill = method)) +
geom_bar(stat="identity") +
geom_text(aes(label=sentiment), position=position_dodge(width=0.9), vjust=-0.25)
# line graph for all 3 lexicons
wh.aff_bin_nrc %>%
ggplot(aes(x=day, y=sentiment, group=method, color=method)) +
geom_line(size=1) +
geom_point() + labs(x="day", y="sentiment", title = "Sentiment vs Days for all 3 lexicons") +
scale_color_manual(values=c("red", "green", "blue")) +
theme(plot.title = element_text(hjust = 0.5))
a <- tidy_data %>%
anti_join(stop_words) %>%
inner_join(nrcLex) %>%
count(day, sentiment) %>%
spread(sentiment, n, fill=0) %>%
gather(variable, value, c('positive','trust')) %>%
ggplot(aes(day, value,  color = variable,fill = variable)) +
geom_line(stat="identity") +
ylab('Sentiment')
b <- tidy_data %>%
anti_join(stop_words) %>%
inner_join(nrcLex) %>%
count(day, sentiment) %>%
spread(sentiment, n, fill=0) %>%
gather(variable, value, c('anger','anticipation','disgust','fear','joy','negative','sadness','surprise')) %>%
ggplot(aes(day, value,  color = variable,fill = variable)) +
geom_line(stat="identity") +
ylab('Sentiment')
ggarrange(a, b, ncol=1,top = "White House Briefings - Daily Sentiment by Categories Using NRC")
mdFrame <- dateFrame
colnames(mdFrame) <- c("Date","Day")
mdFrame$DFDMX_Close <- DFDMX$DFDMX.Close
mdFrame$CCSMX_Close <- CCSMX$CCSMX.Close
mdFrame$PRDMX_Close <- PRDMX$PRDMX.Close
mdFrame$OTCAX_Close <- OTCAX$OTCAX.Close
mdFrame$BMGAX_Close <- BMGAX$BMGAX.Close
mdFrame$Sentiment <- wh.bing$sentiment
tst2Frame <- mdFrame
tst2Frame$AvgClose <- (mdFrame$DFDMX_Close + mdFrame$CCSMX_Close + mdFrame$PRDMX_Close + mdFrame$OTCAX_Close + mdFrame$BMGAX_Close)/5
SmLm2 <- lm(AvgClose ~ Sentiment, data= tst2Frame)
summary(SmLm2)
plot1 <- tst2Frame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Mid Cap Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tst2Frame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
tst2Frame <- mdFrame
tst2Frame$AvgClose <- (mdFrame$DFDMX_Close + mdFrame$CCSMX_Close + mdFrame$PRDMX_Close + mdFrame$OTCAX_Close + mdFrame$BMGAX_Close)/5
SmLm3 <- lm(AvgClose ~ Sentiment, data= tst2Frame)
summary(SmLm3)
plot1 <- tst2Frame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Mid Cap Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tst2Frame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
lgFrame <- dateFrame
colnames(lgFrame) <- c("Date","Day")
lgFrame$TRLGX_Close <- TRLGX$TRLGX.Close
lgFrame$PREFX_Close <- PREFX$PREFX.Close
lgFrame$TPLGX_Close <- TPLGX$TPLGX.Close
lgFrame$FDSVX_Close <- FDSVX$FDSVX.Close
lgFrame$PBLAX_Close <- PBLAX$PBLAX.Close
lgFrame$Sentiment <- wh.bing$sentiment
tst3Frame <- lgFrame
tst3Frame$AvgClose <- (TRLGX$TRLGX.Close + PREFX$PREFX.Close + TPLGX$TPLGX.Close + FDSVX$FDSVX.Close + PBLAX$PBLAX.Close)/5
SmLm4 <- lm(AvgClose ~ Sentiment, data= tst3Frame)
summary(SmLm4)
plot1 <- tst3Frame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Large Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tst3Frame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
tst2Frame <- mdFrame
tst2Frame$AvgClose <- (mdFrame$DFDMX_Close + mdFrame$CCSMX_Close + mdFrame$PRDMX_Close + mdFrame$OTCAX_Close + mdFrame$BMGAX_Close)/5
SmLm3 <- lm(AvgClose ~ Sentiment, data= tst2Frame)
summary(SmLm3)
plot1 <- tst2Frame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Mid Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tst2Frame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
tstFrame <- smFrame
smFrame <- dateFrame
colnames(smFrame) <- c("Date","Day")
smFrame$PSGAX_Close <- PSGAX$PSGAX.Close
smFrame$FKASX_Close <- FKASX$FKASX.Close
smFrame$PGSGX_Close <- PGSGX$PGSGX.Close
smFrame$QUASX_Close <- QUASX$QUASX.Close
smFrame$TRSSX_Close <- TRSSX$TRSSX.Close
smFrame$Sentiment <- wh.bing$sentiment
tstFrame <- smFrame
tstFrame$AvgClose <- (smFrame$PSGAX_Close + smFrame$FKASX_Close + smFrame$PGSGX_Close + smFrame$TRSSX_Close + smFrame$QUASX_Close)/5
SmLm2 <- lm(AvgClose ~ Sentiment, data= tstFrame)
summary(SmLm2)
plot1 <- tstFrame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Small Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tstFrame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
tst2Frame <- mdFrame
tst2Frame$AvgClose <- (mdFrame$DFDMX_Close + mdFrame$CCSMX_Close + mdFrame$PRDMX_Close + mdFrame$OTCAX_Close + mdFrame$BMGAX_Close)/5
SmLm3 <- lm(AvgClose ~ Sentiment, data= tst2Frame)
summary(SmLm3)
plot1 <- tst2Frame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Mid Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tst2Frame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
corr(tst2Frame)
corrplot::(tst2Frame)
corrplot::tst2Frame
cor(tst2Frame)
cor(tst2Frame[3:8])
cor(tst2Frame[8:9])
cor(tst3Frame[8:9])
cor(tstFrame[8:9])
tstFrame <- smFrame
tstFrame$AvgClose <- (smFrame$PSGAX_Close + smFrame$FKASX_Close + smFrame$PGSGX_Close + smFrame$TRSSX_Close + smFrame$QUASX_Close)/5
SmLm2 <- lm(AvgClose ~ Sentiment, data= tstFrame)
summary(SmLm2)
cor(tstFrame[8:9])
plot1 <- tstFrame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Small Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tstFrame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Biin Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
tstFrame <- smFrame
tstFrame$AvgClose <- (smFrame$PSGAX_Close + smFrame$FKASX_Close + smFrame$PGSGX_Close + smFrame$TRSSX_Close + smFrame$QUASX_Close)/5
SmLm2 <- lm(AvgClose ~ Sentiment, data= tstFrame)
summary(SmLm2)
cor(tstFrame[8:9])
plot1 <- tstFrame %>%
ggplot(aes(x=Day, y=AvgClose, group=1)) +
geom_line() +
geom_point() + labs(x=" Days", y="Closing Price", title = "Avg of Closing Price for Top 5 Small Growth Funds", subtitle = " March 15, 2020 - April 30, 2020")
plot2 <- tstFrame %>%
ggplot(aes(x=Day, y=Sentiment, group=1)) +
geom_line() +
geom_point() + labs(x="Days", y="WH Briefing Sentiment", title = "Bing Sentiment Scores over 32 Days of WH Briefings", subtitle = "March 15, 2020 - April 30, 2020")
grid.arrange(plot1, plot2, nrow = 2)
library(readr)
library(dplyr)
library(knitr)
library(tidyr)
library(ggplot2)
library(DATA606)
library(psych)
library(Hmisc)
library(corrplot)
library(PerformanceAnalytics)
# load data
airline_df <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv")
#Let's look at the columns and the different values, making sure there are not N/A values
glimpse(airline_df)
#Overall summary data of the raw data
summary(airline_df)
ggplot(airline_df, aes(x=airline_df[3:8])) + geom_bar()
ggplot(airline_df, aes(x= airline, y = c(incidents_00_14, fatal_accidents_00_14, fatalities_00_14))) + geom_bar()
ggplot(airline_df, aes(x= airline, y = incidents_00_14)) + geom_bar()
airline_df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
airlines <- airline_df[ ,2:length(airline_df)]
airlines.cor = cor(airlines, method = c("spearman"))
newCorr <- rcorr(as.matrix(airlines))
flattenCorrMatrix(newCorr$r, newCorr$P)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
##Above formula was taken from Reference 1
airlines <- airline_df[ ,2:length(airline_df)]
airlines.cor = cor(airlines, method = c("spearman"))
newCorr <- rcorr(as.matrix(airlines))
flattenCorrMatrix(newCorr$r, newCorr$P)
lm(incidents_85_99 ~ incidents_00_14, data = airlines_df)
lm(incidents_85_99 ~ incidents_00_14, data = airline_df)
summary(incidents)
incidents <- lm(incidents_85_99 ~ incidents_00_14, data = airline_df)
summary(incidents)
# load data
airline_df <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv")
#Let's look at the columns and the different values, making sure there are not N/A values
glimpse(airline_df)
#Overall summary data of the raw data
summary(airline_df)
airline_df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
#Overall summary data of the raw data
summary(airline_df)
incidents <- lm(incidents_85_99 ~ incidents_00_14, data = airline_df)
summary(incidents)
plot(airline_df$incidents_85_99 ~ airline_df$incidents_00_14)
abline(incidents)
cor(airline_df$incidents_85_99, airline_df$incidents_00_14)
airlines <- airline_df[ ,2:length(airline_df)]
airlines.cor = cor(airlines, method = c("spearman"))
newCorr <- rcorr(as.matrix(airlines))
flattenCorrMatrix(newCorr$r, newCorr$P)
incidents <- lm(incidents_85_99 ~ incidents_00_14, data = airline_df)
summary(incidents)
cor(airline_df$incidents_85_99, airline_df$incidents_00_14)
#Graph the plot showing the linear regession for incidents
plot(airline_df$incidents_85_99 ~ airline_df$incidents_00_14)
abline(incidents)
airlines <- airline_df[ ,2:length(airline_df)]
airlines.cor = cor(airlines, method = c("spearman"))
newCorr <- rcorr(as.matrix(airlines))
flattenCorrMatrix(newCorr$r, newCorr$P)
airline_df <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv")
#Let's look at the columns and the different values, making sure there are not N/A values
glimpse(airline_df)
#Overall summary data of the raw data
summary(airline_df)
airline_df %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_histogram()
