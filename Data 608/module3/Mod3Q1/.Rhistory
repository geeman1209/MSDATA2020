)
)
server <- shinyServer(function(input, output, session) {
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, state == input$state)
})
output$plot1 <- renderPlot(
{
df$Deaths_Rate <-  as.double(df$Deaths/df$Population*1000)
df$Year <- as.factor(df$Year)
df$nation_Death_Rate <- ave(df$Deaths_Rate,df$Year)
df$stat_nation_Rate<-df$Deaths_Rate-df$nation_Death_Rate
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, State == input$state)
ggplot(data=dfSlice, aes(x=Year, y=stat_nation_Rate)) +
geom_line()+ geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
})
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- shinyServer(function(input, output, session) {
selectedData <- reactive({
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, state == input$state)
})
output$plot1 <- renderPlot(
{
df$Deaths_Rate <-  as.double(df$Deaths/df$Population*1000)
df$Year <- as.factor(df$Year)
df$nation_Death_Rate <- ave(df$Deaths_Rate,df$Year)
df$stat_nation_Rate<-df$Deaths_Rate-df$nation_Death_Rate
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, State == input$state)
ggplot(data=dfSlice, aes(x=Year, y=stat_nation_Rate)) +
geom_line()+ geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
})
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- shinyServer(function(input, output, session) {
selectedData <- reactive({
dfSlice <- cdc_df %>%
filter(ICD.Chapter == input$icd, state == input$state)
})
output$plot1 <- renderPlot(
{
df$Deaths_Rate <-  as.double(df$Deaths/df$Population*1000)
df$Year <- as.factor(df$Year)
df$nation_Death_Rate <- ave(df$Deaths_Rate,df$Year)
df$stat_nation_Rate<-df$Deaths_Rate-df$nation_Death_Rate
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, State == input$state)
ggplot(data=dfSlice, aes(x=Year, y=stat_nation_Rate)) +
geom_line()+ geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
})
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- shinyServer(function(input, output, session) {
selectedData <- reactive({
dfSlice <- cdc_df %>%
filter(ICD.Chapter == input$icd, state == input$state)
})
output$plot1 <- renderPlot(
{
df$Deaths_Rate <-  as.double(cdc_df$Deaths/cdc_df$Population*1000)
df$Year <- as.factor(cdc_df$Year)
df$nation_Death_Rate <- ave(cdc_df$Deaths_Rate,cdc_df$Year)
df$stat_nation_Rate<-cdc_df$Deaths_Rate-cdc_df$nation_Death_Rate
dfSlice <- df %>%
filter(ICD.Chapter == input$icd, State == input$state)
ggplot(data=dfSlice, aes(x=Year, y=stat_nation_Rate)) +
geom_line()+ geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
})
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- shinyServer(function(input, output, session) {
selectedData <- reactive({
dfSlice <- cdc_df %>%
filter(ICD.Chapter == input$icd, state == input$state)
})
output$plot1 <- renderPlot(
{
cdc_df$Deaths_Rate <-  as.double(cdc_df$Deaths/cdc_df$Population*1000)
cdc_df$Year <- as.factor(cdc_df$Year)
cdc_df$nation_Death_Rate <- ave(cdc_df$Deaths_Rate,cdc_df$Year)
cdc_df$stat_nation_Rate<-cdc_df$Deaths_Rate-cdc_df$nation_Death_Rate
dfSlice <- cdc_df %>%
filter(ICD.Chapter == input$icd, State == input$state)
ggplot(data=dfSlice, aes(x=Year, y=stat_nation_Rate)) +
geom_line()+ geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
})
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
national_df <- cdc_df %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
dfSlice <- national_df %>%
filter(ICD.Chapter == input$icd, Year == input$State)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = 'CT', mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$State," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
cdc_df <- read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv')
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD.Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
national_df <- cdc_df %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
dfSlice <- national_df %>%
filter(ICD.Chapter == input$icd, State == input$State)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = 'CT', mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$State," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
View(national_df)
View(dfSlice)
national_df <- cdc_df %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
View(national_df)
ui <- fluidPage(
headerPanel('CDC Mortality 1999-2010'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- national_df %>%
filter(ICD.Chapter == input$icd, State == input$State)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = 'CT', mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$State," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
national_df
dfSlice <- national_df %>% filter(ICD.Chapter = 'Neoplasms', State == 'CT')
dfSlice <- national_df %>% filter(ICD.Chapter == 'Neoplasms', State == 'CT')
dfSlice
national_df <- cdc_df %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
cdc_df2 <- cdc_df2 %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
cdc_df2 <- read.csv('https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv')
cdc_df2 <- cdc_df2 %>% group_by(ICD.Chapter, Year) %>% mutate(Nat.Avg = sum(Deaths)/sum(Population) * 10^5)
ui <- fluidPage(
headerPanel('National Average vs State'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$State)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = 'CT', mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$State," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = 'CT', mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$State," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "lines+markers", source = "subset") %>%
layout(title = paste("Mortailty vs Year for ", input$state," and ", input$icd),
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths per 100,000'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "lines+markers", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines+markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "lines", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'lines')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Certain infectious and parasitic diseases'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'AL')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "markers", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'NEoplasms'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'CT')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "markers", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Neoplasms'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'CT')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "markers", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
dragmode =  "select",
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'markers')
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
headerPanel('National Average vs State Mortality Rate'),
sidebarPanel(
selectInput('icd', 'ICD Chapter', unique(cdc_df$ICD.Chapter), selected = 'Neoplasms'),
selectInput('state', 'State', unique(cdc_df$State),selected = 'CT')
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
dfSlice <- cdc_df2 %>% filter(ICD.Chapter == input$icd, State == input$state)
plot_ly(dfSlice, x = ~Year, y = ~Crude.Rate, type = "scatter",  name = input$state, mode = "markers", source = "subset") %>%
layout(
xaxis = list(title = 'Year'),
yaxis = list(title = 'Deaths'),
plot_bgcolor = "white")%>%
add_trace(y = ~dfSlice$Nat.Avg, name = 'National Average',mode = 'markers')
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp('C:\MSDATA2020\Data 608\module3\HW3_Q1.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp('..\HW3_Q1.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp(C:\MSDATA2020\Data 608\module3)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp('C:\MSDATA2020\Data 608\module3')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='gabriel-abreu',
token='F2499DFF3F736A824D81BD3F6167DD0F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='gabriel-abreu',
token='F2499DFF3F736A824D81BD3F6167DD0F',
secret='A2+0La2lpz9vkEJoy5YgSgQjirhYkCkheUrqcNg/')
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp()
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp(appName='Module 3 Q1' )
library(ggplot2)
library(dplyr)
library(plotly)
library(shiny)
library(rsconnect)
rsconnect::deployApp(appName='Module3Q1' )
knitr::opts_chunk$set(echo = TRUE)
rsconnect::appDependencies()
runApp('C:/MSDATA2020/Data 608/module3/App/q1mod3.R')
runApp('C:/MSDATA2020/Data 608/module3/App/q1mod3.R')
runApp('C:/MSDATA2020/Data 608/module3/App/q1mod3.R')
runApp('C:/MSDATA2020/Data 608/module3/App/q1mod3.R')
runApp('C:/MSDATA2020/Data 608/module3/App/q1mod3.R')
runApp('C:/MSDATA2020/Data 608/module3/Mod3Q1')
runApp('C:/MSDATA2020/Data 608/module3/Mod3Q2')
runApp('C:/MSDATA2020/Data 608/module3/Mod3Q2')
runApp('C:/MSDATA2020/Data 608/module3/Mod3Q1')
